# Docker image.
# Build a Docker image to deploy, run, or push to a container registry.
# Add steps that use Docker Compose, tag images, push to a registry, run an image, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  batch: true
  branches:
    include:
    - master
    - develop

pool:
  vmImage: 'Ubuntu-16.04'

variables:
  imageName: '$(Build.Repository.Name):$(build.buildId)'

steps:
# Login into Azure
- task: Docker@1
  displayName: Login into Azure container registry
  condition: always()
  inputs:
    command: login
    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
    azureContainerRegistry: $(azureContainerRegistry)

# Build image
- task: Docker@1
  displayName: Build image
  inputs:
    command: build
    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
    azureContainerRegistry: $(azureContainerRegistry)    
    dockerFile: Dockerfile
    imageName: $(imageName)

# Perform TESTS
- task: Docker@1
  displayName: 'Running unit tests'
  inputs:
    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
    azureContainerRegistry: $(azureContainerRegistry)
    imageName: $(azureContainerRegistry)/$(imageName)    
    command: run
    containerName: unittests
    volumes: '$(Build.Repository.LocalPath):/app/test_results'    
    workingDirectory: /app
    containerCommand: 'npm run unit-tests'
    runInBackground: false
  continueOnError: true

# Upload Tests Results to Analytics 
- task: PublishTestResults@2
  displayName: 'Publish Test Results unit-test-results.xml'
  inputs:
    testResultsFiles: '$(Build.Repository.LocalPath)/unit-test-results.xml'
    failTaskOnFailedTests: true
    testRunTitle: 'Unit Tests Results Upload'
  condition: succeededOrFailed()

# Push this new image to container registry
- task: Docker@1
  displayName: Push image to Azure container registry
  inputs:
    command: push
    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
    azureContainerRegistry: $(azureContainerRegistry)
    imageName: $(imageName)

# Logout after all tasks finished
- task: Docker@1
  displayName: Logout Azure container registry
  condition: always()
  inputs:
    command: logout
    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
    azureContainerRegistry: $(azureContainerRegistry)
